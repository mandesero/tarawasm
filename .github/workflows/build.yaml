name: Build and Test

on:
  push:
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - lang: python
            expected_output: "Hello from Python WASM!"
          - lang: go
            expected_output: "Hello from Go WASM!"
          - lang: js
            expected_output: "Hello from JS WASM!"
          - lang: rust
            expected_output: "Hello from Rust WASM!"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install base tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip patchelf nodejs npm wget curl
        pip install nuitka

    - name: Install Rust and WASM tools
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        source "$HOME/.cargo/env"
        cargo install --locked wkg
        cargo install --locked cargo-component
        cargo install --locked wasm-tools

    - name: Install language-specific tools
      run: |
        if [ "${{ matrix.lang }}" = "python" ]; then
          pip install componentize-py
        elif [ "${{ matrix.lang }}" = "go" ]; then
          wget https://go.dev/dl/go1.24.3.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.24.3.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.37.0/tinygo_0.37.0_amd64.deb
          sudo dpkg -i tinygo_0.37.0_amd64.deb
        elif [ "${{ matrix.lang }}" = "js" ]; then
          npm install -g @bytecodealliance/jco @bytecodealliance/componentize-js
        fi

    - name: Install Wasmtime
      run: |
        curl https://wasmtime.dev/install.sh -sSf | bash
        echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH

    - name: Build tarawasm binary
      run: |
        chmod +x ./build.sh
        ./build.sh
        echo "$PWD" >> $GITHUB_PATH

    - name: Run ${{ matrix.lang }} WASM test
      run: |
        TMP=$(mktemp -d)
        cp examples/${{ matrix.lang }}/docs:adder@0.1.0.wasm $TMP/
        cd $TMP
        tarawasm init --lang ${{ matrix.lang }} --wasm-file docs:adder@0.1.0.wasm adder
        tarawasm bind
        tarawasm build

        echo "Running wasmtime..."
        output=$(wasmtime adder.wasm)
        echo "Output: $output"

        expected="${{ matrix.expected_output }}"
        if [[ "$output" != "$expected" ]]; then
          echo "Expected: $expected"
          echo "Actual:   $output"
          exit 1
        fi
        echo "${{ matrix.lang }} test passed!"
